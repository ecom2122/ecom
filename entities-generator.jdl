entity Address {
	road String,
    postalCode String,
    city String,
    country String,
    additionalDetails String
}

entity Order(jhi_order) {
	paymentDate Instant required,
    promoCode String,
    totalPrice BigDecimal required
}

entity Product {
	name String required,
    description String,
    origin String,
    brand String,
	imagePath String,
    price BigDecimal required,
    weight BigDecimal
}

entity Promotion {
	startDate Instant required,
    endDate Instant required,
    reductionPercentage BigDecimal required
}

entity Cart {
}

entity ProductOrder {
	quantity Integer min(1) required
}

entity ProductCart {
	quantity Integer min(1) required
}

entity Category {
	name String required,
}

entity Recipe {
	name String required,
    description String,
    steps String,
	imagePath String
}

entity Tag {
	name String required
}

entity UserDetails {
	role Role required,
    birthDate LocalDate,
    phoneNumber String
}

enum Role {
	ADMIN, STAFF, CLIENT
}

relationship OneToMany {
  Order{lines} to ProductOrder{order},
  Cart{lines} to ProductCart{cart}
}

relationship ManyToOne {
	Category{parent} to Category,
	Product{category} to Category,
    ProductOrder{product} to Product,
    ProductCart{product} to Product
}

relationship ManyToMany {
  Recipe{products} to Product{recipes},
  Product{tags} to 
  /** Only created because JHipster needs a bidirectional ManyToMany Relationship, should not be used. */
  Tag{products},
  Promotion{products} to 
  /** Only created because JHipster needs a bidirectional ManyToMany Relationship, should not be used. */
  Product{promotions},
  UserDetails{favorites} to 
  /** Only created because JHipster needs a bidirectional ManyToMany Relationship, should not be used. */
  Product{favoritesOf},
  UserDetails{preferences} to 
  /** Only created because JHipster needs a bidirectional ManyToMany Relationship, should not be used. */
  Tag{preferencesOf}
}

relationship OneToOne {
    UserDetails{address} to Address,
    UserDetails{user} to User{details} with jpaDerivedIdentifier
}

service * with serviceImpl

